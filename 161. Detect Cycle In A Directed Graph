bool check(int node, vector <bool> &vis, vector <bool>&path,
vector <int> adjLis[]){
  vis[node]= 1;
  path[node]= 1;
  for(auto child: adjLis[node]){
    if(!vis[child]){
      if(check(child, vis, path, adjLis))
      return true;
    }
    else{
      if(path[child]==1)
      return true;
    }
  }
  path[node]= 0;
  return false;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  vector <int> adjLis[n+1];
   for(auto it: edges){
       int u= it.first;
       int v= it.second;
       adjLis[u].push_back(v);
   }
   vector <bool> vis(n+1, 0), path(n+1, 0);
   for(int i=1; i<=n; i++){
       if(vis[i]==0){
           if(check(i, vis, path, adjLis))
           return 1;
       }

   }
   return 0;
}
// o(v+e), o(v)
