#include <bits/stdc++.h> 
class DisjointSet{
	vector <int> size;
	vector <int> parent;
	public:
		DisjointSet(int n){
			size.resize(n+1, 1);
			parent.resize(n+1);
			for(int i=0; i<=n; i++){
				parent[i]= i;
			}
		}
		
		int findUparent(int node){
			if(parent[node]==node){
				return node;
			}
			
			return parent[node]= findUparent(parent[node]);
		}
		void unionbysize(int u, int v){
        	int ult_pu= findUparent(u);
        	int ult_pv= findUparent(v);
        	if(ult_pu==ult_pv)
        	return ;
        	if(size[ult_pu] > size[ult_pv])
        	{
        		parent[ult_pv]= ult_pu;
        		size[ult_pu]+= size[ult_pv];
            }
			else {
                  parent[ult_pu] = ult_pv;
                  size[ult_pv] += size[ult_pu];
            }
        }
};
bool cmp(vector <int> &a, vector <int> &b){
	return a[2] < b[2];
}
int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	sort(graph.begin(), graph.end(), cmp);

	int sum= 0;
	DisjointSet ds(n);

	for(auto it: graph){
		int u= it[0];
		int v= it[1];
		int wt= it[2];

		if(ds.findUparent(u) != ds.findUparent(v)){
			sum+= wt;
			ds.unionbysize( u, v);
		}
	}
	return sum;
}
