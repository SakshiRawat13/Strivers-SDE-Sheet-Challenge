class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector <vector<int>> ans;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        int i = 0;
        while(i<n) {
            if(i!=0) {
                while(i<n && nums[i] == nums[i-1]) {
                    i++;
                }
            }
            int k = i+1, j = n-1;
            while(k<j){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum == 0) {
                    ans.push_back({nums[i], nums[k], nums[j]});
                    k++;
                    j--;
                    while(k<j && nums[k] == nums[k-1]) {
                        k++;
                    }
                    while(k<j && nums[j] == nums[j+1]) {
                        j--;
                    }
                }
                else if(sum < 0) {
                    k++; 
                    while(k<j && nums[k] == nums[k-1]) {
                        k++;
                    }  
                }
                else {
                    j--;
                    while (k<j && nums[j] == nums[j+1]) {
                        j--;
                    }
                }     
            }
            i++;
        }
        return ans;
    }
};
// tc: o(n^2), sc: o(no. of triplets)
