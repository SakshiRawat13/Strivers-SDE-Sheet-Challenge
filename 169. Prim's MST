#include <bits/stdc++.h> 
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m,
 vector<pair<pair<int, int>, int>> &g)
{
   vector<pair<pair<int, int>, int>> ans;
   vector <pair<int, int>> adjList[n+1];
   for(auto it: g){
       int u= it.first.first;
       int v= it.first.second;
       int wt= it.second;
       adjList[u].push_back({v, wt});
       adjList[v].push_back({u, wt});
   }

   vector <bool> vis(n+1, false);

   priority_queue < pair<int, pair<int, int>>, vector <pair<int,pair<int, int>>>, 
   greater<pair<int,pair<int, int>>>> pq;
   pq.push({0, {1, -1}});  //{wt , {node, parent}}

   while(!pq.empty()){
       auto front= pq.top();
       pq.pop();
       int wt= front.first;
       int node= front.second.first;
       int parent= front.second.second;
       
       if(parent!=-1 && vis[node]==0){
          
          ans.push_back({{parent, node}, wt});
       }
       vis[node]= 1;
            
        for(auto it: adjList[node]){
            int v = it.first;
            int edgeWt= it.second;

            if(!vis[v]){
                pq.push({edgeWt, {v, node}});
            }
        }
   }
   return ans;
}
