#include <bits/stdc++.h>
void dfs(int node, vector <int> adjList[], stack <int> &st,
vector <bool> &vis){
    vis[node]=1;
    for(auto v: adjList[node]){
        if(vis[v]==false){
            dfs(v, adjList, st, vis);
        }
    }
    st.push(node);
}
void dfsreverse(int node, vector <int> adjList[], vector <bool> &vis,
vector <int> &curr){
    vis[node]=1;
    for(auto v: adjList[node]){
        if(vis[v]==false){
            dfsreverse(v, adjList, vis, curr);
        }
    }
    curr.push_back(node);
}
vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
    stack <int> st;
    vector <bool> vis(n, 0);
    vector <int> adj[n];
    for(auto it: edges){
        int u= it[0], v= it[1];
        adj[u].push_back(v);
    }
    for(int i=0; i<n; i++){
        if(vis[i]==false)
         dfs(i, adj, st, vis);
    }
    vector <int> reverseadjList[n];
    for(int i=0; i<n; i++){
        for(auto v: adj[i]){
            reverseadjList[v].push_back(i);
        }
    }

    for(int i=0; i<n; i++)
    vis[i]= false;

    vector <vector<int>> ans;
    while(!st.empty()){
        int tos= st.top();
        st.pop();
        vector <int> curr;
        if(vis[tos]==false){
            dfsreverse(tos, reverseadjList, vis, curr);
        }
        if(!curr.empty()){
            ans.push_back(curr);
        }
    }
    return ans;
}
// tc: o(V+E), sc: o(V)
