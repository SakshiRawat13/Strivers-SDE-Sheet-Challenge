#include <bits/stdc++.h> 
vector <vector<string>> ans;
bool ispalindrome(string str){

    for(int i=0, j= str.length()-1; i<j ; i++, j--){
         if(str[i]!=str[j])
         return false;
    }
    return true;
}
void solve(string & s, int index, vector <string> &curr){
    int n= s.length();
    if(index==n){
       ans.push_back(curr);
       return ;
    }
    for(int i= index; i<n; i++){
        if(ispalindrome(s.substr(index, i-index+1))){
            curr.push_back(s.substr(index, i-index+1));
            solve(s, i+1, curr);
            curr.pop_back();
        }
    }
}
vector<vector<string>> partition(string &s) 
{   vector <string> curr;
    solve(s, 0, curr);
    return ans;
}
// Time Complexity: O(N * ( 2 ^ N ))
//    Space Complexity: O(N ^ 2)
