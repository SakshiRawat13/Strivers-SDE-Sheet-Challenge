bool check(int node, int parent, vector <int> &vis, vector <int> adjLis[]){
    vis[node]= 1;
    for(auto it: adjLis[node]){
        if(vis[it]==0){
           if(check(it, node, vis, adjLis))
           return true;
        }
        else{
            if(it!=parent)
            return true;
        }
    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{  vector <int> adjLis[n+1];
   for(auto it: edges){
       int u= it[0];
       int v= it[1];
       adjLis[u].push_back(v);
       adjLis[v].push_back(u);
   }
   vector <int> vis(n+1, 0);
   for(int i=1; i<=n; i++){
       if(vis[i]==0){
           if(check(i, -1, vis, adjLis))
           return "Yes";
       }

   }
   return "No";
}
// tc: o(v+e) , sc: o(v)
