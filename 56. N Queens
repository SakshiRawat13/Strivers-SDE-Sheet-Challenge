vector <vector <int>> ans;
bool isPossible(int r, int c, int n, vector <vector <int>> &matrix){
    // check right diagonal
    for(int i=r-1, j=c+1; i>=0 && j<n; i--, j++){
        if(matrix[i][j]==1) return false;
    }
    // check left diagonal
    for(int i=r-1, j=c-1; i>=0 && j>=0; i--, j--){
        if(matrix[i][j]==1) return false;
    }
    // check the same column
    for(int i=r-1; i>=0; i--)
    if(matrix[i][c]==1) return false;

    return true;
}
void solve(int row, int n, vector <vector <int>> &matrix){
    if(row==n){
        vector<int> temp;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++)
            temp.push_back(matrix[i][j]);
        }
        ans.push_back(temp);
        return ;
    }
    for(int i=0; i<n; i++){
        if(isPossible(row, i, n, matrix)){
            matrix[row][i]= 1;
            solve(row+1, n, matrix);
            matrix[row][i]= 0;
        }
    }
}
vector<vector<int>> solveNQueens(int n) {
    vector <vector <int>> matrix(n, vector <int> (n, 0));
    solve(0, n, matrix);
    return ans;
}
//Tc : O(N!) Sc : O(N^2)
