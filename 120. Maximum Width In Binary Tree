class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue <pair<TreeNode*, long long>> q;
        q.push({root, 1});
        long long ans = -1;
        while (!q.empty()) {
            int n = q.size();
            long long mini = LONG_MAX, maxi = LONG_MIN;
            long long mmin = q.front().second;
            for(int i = 0; i<n; i++) {
                long long rank = q.front().second - mmin;
                TreeNode* curr = q.front().first;
                q.pop();
                if(i == 0)
                mini = rank;
                if(i == n-1)
                maxi = rank;

                if(curr->left) {
                    q.push({curr->left, 2*rank - 1});
                }
                if(curr->right) {
                    q.push({curr->right, 2*rank });
                }
                ans = max(ans, maxi - mini + 1);
            }
        }
        return ans;
        
    }
};
// tc: o(n) (level order traversal), sc: o(n) (queue)
