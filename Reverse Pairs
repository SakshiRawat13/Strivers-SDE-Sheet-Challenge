#include <bits/stdc++.h> 
void mergeArray(vector <int> & arr, int s, int e){
    int mid=(s+e)/2;
    int len1=mid-s+1;
    int len2=e-mid;
    int *first=new int[len1];
    int *second=new int[len2];
    int mainArrayIndex=s;
    for(int i=0;i<len1;i++){
        first[i]=arr[mainArrayIndex++];
    }
    mainArrayIndex=mid+1;
    for(int i=0;i<len2;i++){
        second[i]=arr[mainArrayIndex++];
    }
    int i=0,j=0;
    mainArrayIndex=s;
    while(i<len1 && j<len2){
        if(first[i]<second[j]){
            arr[mainArrayIndex++]=first[i++];
        }
        else {
            arr[mainArrayIndex++]=second[j++];
        }
    }
    while(i<len1){
        arr[mainArrayIndex++]=first[i++];
    }
    while(j<len2){
        arr[mainArrayIndex++]=second[j++];
    }
    
}
int f(vector < int > & arr, int s, int mid, int e){
    int cnt=0, right= mid+1;
    for(int i=s; i<=mid; i++){
        while(right<=e && arr[i] > 2*arr[right])
        right++;
        cnt += (right - (mid +1));
    }
    return cnt;
}
int mergeSort(vector < int > & arr, int s, int e){
    int cnt=0;
    if(s>=e) return 0;
    int mid=(s+e)/2;
    cnt+= mergeSort(arr,s,mid);
    cnt+= mergeSort(arr,mid+1,e);
    cnt+= f(arr, s, mid, e);
    mergeArray(arr,s,e);
    return cnt;
}
int reversePairs(vector<int> &arr, int n){
    return mergeSort(arr, 0, n-1);
}
