pair<pair<Node*, Node*>, Node*> reverse(int k, Node *root) 
{   if(!root || root->next==NULL)
    return {{root, root}, root};
    Node *p= root, *q= root->next, *r= NULL;
    while(k-- && p){
       p->next= r;
       r= p;
       p= q;
       if(q)
       q= q->next;
    }
    return {{r, root}, p};
}
Node *getListAfterReverseOperation(Node *head, int n, int b[]){
	Node* p= head, *q= head;
	for(int i=0; i<n && p; i++){
		int k= b[i];
		if(k==0)
		continue;
		pair<pair<Node*, Node*>, Node*>curr= reverse(k, p);
		if(i==0){
			head= curr.first.first;
		}
		else{
			q->next= curr.first.first;
		}
		q= curr.first.second;
		p= curr.second;
	}
	if(p!=q)
	q->next= p;
	return head;
}
// tc: o(n), sc: o(1)
